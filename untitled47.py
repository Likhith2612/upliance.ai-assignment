# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f_aDWaZ-FnlQFjNMykVlVF9tUyvU1d7n
"""

import pandas as pd

user_df = pd.read_csv("/content/Untitled spreadsheet - UserDetails.csv.csv")
cooking_sessions_df = pd.read_csv("/content/Untitled spreadsheet - CookingSessions.csv.csv")
order_details_df = pd.read_csv("/content/Untitled spreadsheet - OrderDetails.csv.csv")

merged_1 = pd.merge(user_df, cooking_sessions_df, on="User ID", how="inner")

final_df = pd.merge(merged_1, order_details_df, on="User ID", how="inner")

print(final_df.head())

import pandas as pd
final_data = pd.read_csv("/content/final_data.csv")
final_data.head(5)

import pandas as pd
import matplotlib.pyplot as plt

final_data = pd.read_csv("final_data.csv")

final_data['Amount (USD)'] = final_data['Amount (USD)'].replace('[\$,]', '', regex=True).astype(float)
total_revenue = final_data['Amount (USD)'].sum()
average_revenue = final_data['Amount (USD)'].mean()
fig, ax = plt.subplots(figsize=(6, 4))
ax.bar(['Total Revenue', 'Average Revenue'], [total_revenue, average_revenue], color=['blue', 'green'])

ax.text(0, total_revenue + 10, f"Total Revenue: ${total_revenue:.2f}", ha='center', fontsize=10, color='blue')
ax.text(1, average_revenue + 10, f"Average Revenue: ${average_revenue:.2f}", ha='center', fontsize=10, color='green')

plt.title("Total and Average Revenue(In December)")
plt.ylabel("Revenue (USD)")
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(meal_type_counts['Meal Type_y'], meal_type_counts['Order Count'], color='Orange')
plt.title('Most Ordered Meal Types(In December)')
plt.xlabel('Meal Type')
plt.ylabel('Number of Orders')
plt.show()
plt.figure(figsize=(10, 6))
plt.bar(dish_name_counts['Dish Name_y'], dish_name_counts['Order Count'], color='green')
plt.title('Most Ordered Dish Names(In December)')
plt.xlabel('Dish Name')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.show()

revenue_by_dish = final_data.groupby('Dish Name_y')['Amount (USD)'].sum().reset_index()

revenue_by_dish_sorted = revenue_by_dish.sort_values(by='Amount (USD)', ascending=False)

plt.figure(figsize=(10, 6))
plt.bar(revenue_by_dish_sorted['Dish Name_y'], revenue_by_dish_sorted['Amount (USD)'], color='orange')
plt.title('Top Revenue-Generating Dishes(In December)')
plt.xlabel('Dish Name')
plt.ylabel('Total Revenue (USD)')
plt.xticks(rotation=45)
plt.show()

revenue_by_user = final_data.groupby('User ID')['Amount (USD)'].sum().reset_index()


revenue_by_user_sorted = revenue_by_user.sort_values(by='Amount (USD)', ascending=False)


plt.figure(figsize=(10, 6))
plt.bar(revenue_by_user_sorted['User ID'], revenue_by_user_sorted['Amount (USD)'], color='blue')
plt.title('User-Wise Revenue Contribution(In December)')
plt.xlabel('User ID')
plt.ylabel('Total Revenue (USD)')
plt.xticks(rotation=45)
plt.show()

revenue_by_time = final_data.groupby('Time of Day')['Amount (USD)'].sum().reset_index()

plt.figure(figsize=(8, 5))
plt.bar(revenue_by_time['Time of Day'], revenue_by_time['Amount (USD)'], color=['gold', 'cyan', 'purple'])
plt.title('Revenue by Time of Day(In December)')
plt.xlabel('Time of Day')
plt.ylabel('Total Revenue (USD)')
plt.show()

import numpy as np

plt.figure(figsize=(10, 6))
plt.scatter(final_data['Duration (mins)'], final_data['Amount (USD)'], color='green', alpha=0.6, label="Data Points")

z = np.polyfit(final_data['Duration (mins)'], final_data['Amount (USD)'], 1)
p = np.poly1d(z)

plt.plot(final_data['Duration (mins)'], p(final_data['Duration (mins)']), color='red', label="Trend Line")

plt.title('Revenue vs. Session Duration (In December)')
plt.xlabel('Session Duration (mins)')
plt.ylabel('Revenue (USD)')
plt.legend()
plt.grid()
plt.show()

completed_revenue = final_data[final_data['Order Status'] == 'Completed']['Amount (USD)'].sum()
cancelled_revenue = final_data[final_data['Order Status'] == 'Canceled']['Amount (USD)'].sum()


labels = ['Completed Orders', 'Cancelled Orders']
sizes = [completed_revenue, cancelled_revenue]
colors = ['#66b3ff','#ff6666']
explode = (0.1, 0)

plt.figure(figsize=(7, 7))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)
plt.title('Revenue from Completed vs Cancelled Orders(In December)')
plt.axis('equal')
plt.show()

final_data['Order Date'] = pd.to_datetime(final_data['Order Date'], format='%d/%m/%Y')
daily_revenue = final_data.groupby(final_data['Order Date'].dt.date)['Amount (USD)'].sum().reset_index()
plt.figure(figsize=(10, 6))
plt.plot(daily_revenue['Order Date'], daily_revenue['Amount (USD)'], marker='o', color='purple', linestyle='-', linewidth=2)
plt.title('Day-wise Revenue Trends(In December)')
plt.xlabel('Date')
plt.ylabel('Revenue (USD)')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 6))
plt.hist(final_data['Rating'], bins=5, color='blue', edgecolor='black')
plt.title('Distribution of Ratings(In December)')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

avg_rating_dish = final_data.groupby('Dish Name_y')['Rating'].mean().reset_index()
avg_rating_dish = avg_rating_dish.sort_values(by='Rating', ascending=False)

plt.figure(figsize=(10, 6))
plt.bar(avg_rating_dish['Dish Name_y'], avg_rating_dish['Rating'], color='green', edgecolor='black')
plt.title('Average Rating by Dish(In December)')
plt.xlabel('Dish Name')
plt.ylabel('Average Rating')
plt.xticks(rotation=90)
plt.show()

avg_rating_meal_type = final_data.groupby('Meal Type_y')['Rating'].mean().reset_index()

plt.figure(figsize=(8, 6))
plt.bar(avg_rating_meal_type['Meal Type_y'], avg_rating_meal_type['Rating'], color='orange', edgecolor='black')
plt.title('Average Rating by Meal Type(In December)')
plt.xlabel('Meal Type')
plt.ylabel('Average Rating')
plt.show()

final_data['Order Date'] = pd.to_datetime(final_data['Order Date'], format='%d/%m/%Y')
avg_rating_time = final_data.groupby('Order Date')['Rating'].mean().reset_index()

plt.figure(figsize=(10, 6))
plt.plot(avg_rating_time['Order Date'], avg_rating_time['Rating'], marker='o', color='purple')
plt.title('Ratings Over Time(In December)')
plt.xlabel('Order Date')
plt.ylabel('Average Rating')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

rating_counts = final_data['Rating'].value_counts().reset_index()
rating_counts.columns = ['Rating', 'Count']

colors = ['blue', 'green', 'orange', 'red', 'purple']

plt.figure(figsize=(8, 6))
plt.pie(rating_counts['Count'], labels=rating_counts['Rating'], autopct='%1.1f%%', startangle=90, colors=colors)
plt.title('Most Frequent Rating(In December)')
plt.show()

top_rated_dishes = avg_rating_dish.head(5)

plt.figure(figsize=(10, 6))
bars = plt.bar(top_rated_dishes['Dish Name_y'], top_rated_dishes['Rating'], color='pink', edgecolor='black')
plt.title('Top 5 Highest Rated Dishes(In December)')
plt.xlabel('Dish Name')
plt.ylabel('Average Rating')
plt.xticks(rotation=90)

for bar in bars:
    bar.set_edgecolor('black')

plt.show()

plt.figure(figsize=(10, 6))
final_data.groupby('User ID')['Rating'].mean().plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Average Rating per User(In December)')
plt.xlabel('User ID')
plt.ylabel('Average Rating')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(final_data['Session Rating'], final_data['Rating'], color='teal', alpha=0.6)  # Plot points
plt.title('Session Rating vs. Order Rating')
plt.xlabel('Session Rating')
plt.ylabel('Order Rating')

plt.show()

import pandas as pd

final_data = pd.read_csv('/content/final_data.csv')
user_data = pd.read_csv('/content/Untitled spreadsheet - UserDetails.csv.csv')
final_data['Order Date'] = pd.to_datetime(final_data['Order Date'], format='%d/%m/%Y')

december_orders = final_data[final_data['Order Date'].dt.month == 12]
users_with_orders_in_december = december_orders['User ID'].unique()

inactive_users = user_data[~user_data['User ID'].isin(users_with_orders_in_december)]
user_status = ['Active Users (December Orders)', 'Inactive Users (No December Orders)']
user_count = [len(users_with_orders_in_december), len(inactive_users)]

plt.figure(figsize=(8, 6))
plt.bar(user_status, user_count, color=['green', 'red'])
plt.title('Active vs Inactive Users (December Orders)')
plt.xlabel('User Status')
plt.ylabel('Number of Users')
plt.show()

orders_by_location = final_data.groupby('Location')['Order ID'].nunique().reset_index()
plt.figure(figsize=(10, 6))
plt.bar(orders_by_location['Location'], orders_by_location['Order ID'], color='orange')
plt.title('Total Orders by Location')
plt.xlabel('Location')
plt.ylabel('Total Orders')
plt.xticks(rotation=90)
plt.show()

final_data['Registration Date'] = pd.to_datetime(final_data['Registration Date'], format='%d/%m/%Y')
final_data['Registration Month'] = final_data['Registration Date'].dt.to_period('M')
user_growth = final_data.groupby('Registration Month')['User ID'].nunique().reset_index()
plt.figure(figsize=(10, 6))
plt.plot(user_growth['Registration Month'].astype(str), user_growth['User ID'], marker='o', color='red')
plt.title('User Growth Over Time')
plt.xlabel('Month')
plt.ylabel('New Users')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

orders_by_meal_type = final_data.groupby('Meal Type_y')['Order ID'].nunique().reset_index()
plt.figure(figsize=(10, 6))
plt.pie(orders_by_meal_type['Order ID'], labels=orders_by_meal_type['Meal Type_y'], autopct='%1.1f%%', startangle=90)
plt.title('Meal Type Popularity')
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(final_data['User ID'].value_counts(), bins=20, color='skyblue', edgecolor='black')
plt.title('Order Frequency per User')
plt.xlabel('Number of Orders')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(final_data['Order Date'], final_data['Amount (USD)'], color='green', label='Revenue')
plt.title('Revenue vs. Discount Impact')
plt.xlabel('Order Date')
plt.ylabel('Revenue (USD)')
plt.grid(True)
plt.show()